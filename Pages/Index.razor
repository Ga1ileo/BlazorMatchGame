@page "/"
@page "/game"
@using System.Timers
@using BlazorMatchGame.Models

<style>
    .container {
        width: 400px;
    }

    button {
        width: 100px;
        height: 100px;
        font-size: 50px;
    }
</style>

@*<h1>Hello, world!</h1>

    Welcome to your new app.

    <SurveyPrompt Title="How is Blazor working for you?" />*@

<div class="container">
    <div class="row">
        @for (var animalNumber = 0; animalNumber < shuffledAnimals.Count; animalNumber++)
        {
            var animal = shuffledAnimals[animalNumber];
            var uniqueDescription = $"Button #{animalNumber}";
            <div class="col-3">
                <button @onclick="@(() => ButtonClick(animal, uniqueDescription))"
                        type="button"
                        class="btn btn-outline-dark">
                    <h1>@animal</h1>
                </button>
            </div>
        }
    </div>
    <div class="row">
        <h2>Matches found: @matchesFound</h2>
    </div>
    <div class="row">
        <h2>Time: @timeDisplay</h2>
    </div>
    <div class="row">
        <h3>Nombre: <input @bind="nombre" /></h3>
    </div>
</div>




@code{

    List<string> animalEmoji = new List<string>()
{
        "🐶","🐶",
        "🐺","🐺",
        "🐮","🐮",
        "🦊","🦊",
        "🐱","🐱",
        "🦁","🦁",
        "🐯","🐯",
        "🐹","🐹",
        "🐝","🐝",
        "🐢","🐢",
    };


    List<string> shuffledAnimals = new List<string>();
    int matchesFound = 0;
    Timer timer;
    int tenthsOfSecoundsElapsed = 0;
    string timeDisplay;
    string nombre= string.Empty;


    protected override void OnInitialized()
    {

        timer = new Timer(100);
        timer.Elapsed += Timer_Trick;
        SetupGame();
    }

    private void SetupGame()
    {
        Random random = new Random();
        shuffledAnimals = animalEmoji
            .OrderBy(item => random.Next())
            .ToList();
        matchesFound = 0;
        tenthsOfSecoundsElapsed = 0;
    }

    string lastAnimalFound = string.Empty;
    string lastDescription = string.Empty;

    private void ButtonClick(string animal, string animalDescription)
    {
        if (lastAnimalFound == string.Empty)
        {
            //First selection of the pair. Remenber it.
            lastAnimalFound = animal;
            lastDescription = animalDescription;
            timer.Start();
        }
        else if ((animalDescription != lastDescription) && (lastAnimalFound == animal))
        {
            //match found! reset for next pair.
            lastAnimalFound = string.Empty;

            //Replace found animals with empty string to hid then
            shuffledAnimals = shuffledAnimals
                .Select(a => a.Replace(animal, string.Empty))
                .ToList();
            matchesFound++;
            if (matchesFound == 10)
            {
                timer.Stop();
                timeDisplay += " - Play Again?";
                SetupGame();
            }
        }
        else
        {
            //user selected a pair that dont match.
            //reset selection
            lastAnimalFound = string.Empty;
        }
    }

    private void Timer_Trick(Object source, ElapsedEventArgs e)
    {
        InvokeAsync(() =>
        {
            tenthsOfSecoundsElapsed++;
            timeDisplay = (tenthsOfSecoundsElapsed / 10F)
            .ToString("0.0s");
            StateHasChanged();
        });
    }


}